#!/bin/bash 
#

PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/ssl/bin:/usr/sfw/bin
export PATH



# Location of system binaries
AWK=$(which awk)
DATE=$(which date)
GREP=$(which grep)
OPENSSL=$(which openssl)
PRINTF=$(which printf)
SED=$(which sed)
MKTEMP=$(which mktemp)


# Set the default umask to be somewhat restrictive
umask 077

#############################################################################
# Purpose: Convert a date from MONTH-DAY-YEAR to Julian format
# Acknowledgements: Code was adapted from examples in the book
#                   "Shell Scripting Recipes: A Problem-Solution Approach"
#                   ( ISBN 1590594711 )
# Arguments:
#   $1 -> Hour   (e.g., 23)
#   $2 -> Day   (e.g., 08)
#   $3 -> Month (e.g., 06)
#   $4 -> Year  (e.g., 2006)
#############################################################################
date2julian() {

    if [ "${1}" != "" ] && [ "${2}" != ""  ] && [ "${3}" != "" ] && [ "${4}" != "" ]
    then
        ## Since leap years add aday at the end of February, 
        ## calculations are done from 1 March 0000 (a fictional year)
        d2j_tmpmonth=$((12 * ${4} + ${3} - 3))
        
        ## If it is not yet March, the year is changed to the previous year
        d2j_tmpyear=$(( ${d2j_tmpmonth} / 12))
        
        ## The number of days from 1 March 0000 is calculated
        ## and the number of days from 1 Jan. 4713BC is added 
        tmpday=$(( (734 * ${d2j_tmpmonth} + 15) / 24
                 - 2 * ${d2j_tmpyear} + ${d2j_tmpyear}/4 
                 - ${d2j_tmpyear}/100 + ${d2j_tmpyear}/400 + $2 + 1721119 ))
        echo $(( (${tmpday} * 24) + ${1} ))
    else
        echo 0
    fi
}

#############################################################################
# Purpose: Convert a string month into an integer representation
# Arguments:
#   $1 -> Month name (e.g., Sep)
#############################################################################
getmonth() 
{
    case ${1} in
        Jan) echo 1 ;;
        Feb) echo 2 ;;
        Mar) echo 3 ;;
        Apr) echo 4 ;;
        May) echo 5 ;;
        Jun) echo 6 ;;
        Jul) echo 7 ;;
        Aug) echo 8 ;;
        Sep) echo 9 ;;
        Oct) echo 10 ;;
        Nov) echo 11 ;;
        Dec) echo 12 ;;
          *) echo  0 ;;
    esac
}

#############################################################################
# Purpose: Calculate the number of hours between two dates
# Arguments:
#   $1 -> Date #1
#   $2 -> Date #2
#############################################################################
date_diff() 
{
    if [ "${1}" != "" ] &&  [ "${2}" != "" ]
    then
        echo $((${2} - ${1}))
    else
        echo 0
    fi
}


#####################################################
### Check the expiration status of a certificate file
### Accepts three parameters:
###  $1 -> certificate file to process
###  $2 -> passphrase for certificate file
###  $3 -> number of hours for which certificate must remain valid 
#####################################################
check_file_status() {

    CERTFILE=${1}

    ### Check to make sure the certificate file exists
    if [ ! -r ${CERTFILE} ] || [ -z ${CERTFILE} ]
    then
        echo "ERROR: The file named ${CERTFILE} is unreadable or doesn't exist"
        echo "ERROR: Please check to make sure the certificate for ${HOST}:${PORT} is valid"
        exit 1
    fi
 
    ### Grab the expiration date from the X.509 certificate
    if [ "${PKCSDBPASSWD}" != "" ]
    then
           
        # Extract the expiration date from the certificate
        CERTDATE=$(${OPENSSL} pkcs12 -info -nokeys -passin pass:${PKCSDBPASSWD} -in ${CERTFILE} 2>/dev/null | \
                 ${OPENSSL} x509 -enddate -noout | \
                 ${SED} 's/notAfter\=//')

        #CERTDATE=$(${OPENSSL} x509 -in ${CERTFILE} -enddate -noout | \
        #         ${SED} 's/notAfter\=//')
    fi

    ### Split the result into parameters, and pass the relevant pieces to date2julian
    set -- ${CERTDATE}
    MONTH=$(getmonth ${1})
    
    HOUR=$(echo ${3}|cut -d: -f1)

    # Convert the date to seconds, and get the diff between NOW and the expiration date
    CERTJULIAN=$(date2julian ${HOUR} ${2#0} ${MONTH#0} ${4})
 
    CERTDIFF=$(date_diff ${NOWJULIAN} ${CERTJULIAN})
   
    if [ ${CERTDIFF} -lt 0 ]
    then
        exit 3
    elif [ ${CERTDIFF} -lt ${WARNHOURS} ]
    then
        exit 2
    else
        exit 0
    fi
}

#################################
### Start of main program
#################################
CERTFILE=$1
PKCSDBPASSWD=$2
WARNHOURS=$3

### Check to make sure a openssl utility is available
if [ ! -f ${OPENSSL} ]
then
    echo "ERROR: The openssl binary does not exist in ${OPENSSL}."
    echo "FIX: Please modify the \${OPENSSL} variable in the program header."
    exit 1
fi

### Check to make sure a date utility is available
if [ ! -f ${DATE} ]
then
    echo "ERROR: The date binary does not exist in ${DATE} ."
    echo "FIX: Please modify the \${DATE} variable in the program header."
    exit 1
fi

### Check to make sure a grep utility is available
if [ ! -f ${GREP} ]
then
    echo "ERROR: The grep binary does not exist in ${GREP} ."
    echo "FIX: Please modify the \${GREP} variable in the program header."
    exit 1
fi

### Check to make sure the mktemp and printf utilities are available
if [ ! -f ${MKTEMP} ] || [ ! -f ${PRINTF} ]
then
    echo "ERROR: Unable to locate the mktemp or printf binary."
    echo "FIX: Please modify the \${MKTEMP} and \${PRINTF} variables in the program header."
    exit 1
fi

### Check to make sure the sed and awk binaries are available
if [ ! -f ${SED} ] || [ ! -f ${AWK} ]
then
    echo "ERROR: Unable to locate the sed or awk binary."
    echo "FIX: Please modify the \${SED} and \${AWK} variables in the program header."
    exit 1
fi



### Baseline the dates so we have something to compare to
MONTH=$(${DATE} "+%m")
DAY=$(${DATE} "+%d")
HOUR=$(${DATE} "+%H")
YEAR=$(${DATE} "+%Y")
NOWJULIAN=$(date2julian ${HOUR#0} ${DAY#0} ${MONTH#0} ${YEAR})



### Check to see if the certificate in CERTFILE is about to expire
if [ "${CERTFILE}" != "" ]
then
    check_file_status ${CERTFILE}
fi

